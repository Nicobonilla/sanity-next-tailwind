/**
 * ---------------------------------------------------------------------------------
 * This file has been generated by Sanity TypeGen.
 * Command: `sanity typegen generate`
 *
 * Any modifications made directly to this file will be overwritten the next time
 * the TypeScript definitions are generated. Please make changes to the Sanity
 * schema definitions and/or GROQ queries if you need to update these types.
 *
 * For more information on how to use Sanity TypeGen, visit the official documentation:
 * https://www.sanity.io/docs/sanity-typegen
 * ---------------------------------------------------------------------------------
 */

// Source: schema.json
export type SanityImagePaletteSwatch = {
  _type: 'sanity.imagePaletteSwatch';
  background?: string;
  foreground?: string;
  population?: number;
  title?: string;
};

export type SanityImagePalette = {
  _type: 'sanity.imagePalette';
  darkMuted?: SanityImagePaletteSwatch;
  lightVibrant?: SanityImagePaletteSwatch;
  darkVibrant?: SanityImagePaletteSwatch;
  vibrant?: SanityImagePaletteSwatch;
  dominant?: SanityImagePaletteSwatch;
  lightMuted?: SanityImagePaletteSwatch;
  muted?: SanityImagePaletteSwatch;
};

export type SanityImageDimensions = {
  _type: 'sanity.imageDimensions';
  height?: number;
  width?: number;
  aspectRatio?: number;
};

export type SanityFileAsset = {
  _id: string;
  _type: 'sanity.fileAsset';
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  originalFilename?: string;
  label?: string;
  title?: string;
  description?: string;
  altText?: string;
  sha1hash?: string;
  extension?: string;
  mimeType?: string;
  size?: number;
  assetId?: string;
  uploadId?: string;
  path?: string;
  url?: string;
  source?: SanityAssetSourceData;
};

export type Geopoint = {
  _type: 'geopoint';
  lat?: number;
  lng?: number;
  alt?: number;
};

export type Service = {
  _id: string;
  _type: 'service';
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  title?: string;
  isActive?: boolean;
  orderRank?: string;
  slug?: Slug;
  content?: Array<
    | {
        children?: Array<{
          marks?: Array<string>;
          text?: string;
          _type: 'span';
          _key: string;
        }>;
        style?:
          | 'normal'
          | 'h1'
          | 'h2'
          | 'h3'
          | 'h4'
          | 'h5'
          | 'h6'
          | 'blockquote';
        listItem?: 'bullet' | 'number';
        markDefs?: Array<{
          href?: string;
          _type: 'link';
          _key: string;
        }>;
        level?: number;
        _type: 'block';
        _key: string;
      }
    | {
        asset?: {
          _ref: string;
          _type: 'reference';
          _weak?: boolean;
          [internalGroqTypeReferenceTo]?: 'sanity.imageAsset';
        };
        hotspot?: SanityImageHotspot;
        crop?: SanityImageCrop;
        _type: 'image';
        _key: string;
      }
  >;
  unitBusiness?: {
    _ref: string;
    _type: 'reference';
    _weak?: boolean;
    [internalGroqTypeReferenceTo]?: 'unitBusiness';
  };
  components?: Array<{
    orderRank?: string;
    isActive?: boolean;
    typeComponent?: {
      _ref: string;
      _type: 'reference';
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: 'component';
    };
    variant?: 'hero';
    background?: {
      _ref: string;
      _type: 'reference';
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: 'background';
    };
    imageBackground?: {
      asset?: {
        _ref: string;
        _type: 'reference';
        _weak?: boolean;
        [internalGroqTypeReferenceTo]?: 'sanity.imageAsset';
      };
      hotspot?: SanityImageHotspot;
      crop?: SanityImageCrop;
      _type: 'image';
    };
    videoUrl?: string;
    videoType?: 'mp4' | 'webm';
    content?: Array<{
      children?: Array<{
        marks?: Array<string>;
        text?: string;
        _type: 'span';
        _key: string;
      }>;
      style?: 'normal' | 'h1' | 'h2' | 'h3' | 'h4' | 'h5' | 'h6' | 'blockquote';
      listItem?: 'bullet' | 'number';
      markDefs?: Array<{
        href?: string;
        _type: 'link';
        _key: string;
      }>;
      level?: number;
      _type: 'block';
      _key: string;
    }>;
    PTextBanner?: string;
    imageContent?: {
      asset?: {
        _ref: string;
        _type: 'reference';
        _weak?: boolean;
        [internalGroqTypeReferenceTo]?: 'sanity.imageAsset';
      };
      hotspot?: SanityImageHotspot;
      crop?: SanityImageCrop;
      _type: 'image';
    };
    imagePosition?: 'left' | 'right' | 'top' | 'bottom';
    layoutItems?: string;
    PTextItem?: string;
    items?: Array<{
      orderRank?: string;
      isActive?: boolean;
      image?: {
        asset?: {
          _ref: string;
          _type: 'reference';
          _weak?: boolean;
          [internalGroqTypeReferenceTo]?: 'sanity.imageAsset';
        };
        hotspot?: SanityImageHotspot;
        crop?: SanityImageCrop;
        _type: 'image';
      };
      alt?: string;
      icon?: IconManager;
      svgIcon?: string;
      svgIconList?: Array<
        {
          _key: string;
        } & IconsListItem
      >;
      content?: Array<
        | {
            children?: Array<{
              marks?: Array<string>;
              text?: string;
              _type: 'span';
              _key: string;
            }>;
            style?:
              | 'normal'
              | 'h1'
              | 'h2'
              | 'h3'
              | 'h4'
              | 'h5'
              | 'h6'
              | 'blockquote';
            listItem?: 'bullet' | 'number';
            markDefs?: Array<{
              href?: string;
              _type: 'link';
              _key: string;
            }>;
            level?: number;
            _type: 'block';
            _key: string;
          }
        | {
            asset?: {
              _ref: string;
              _type: 'reference';
              _weak?: boolean;
              [internalGroqTypeReferenceTo]?: 'sanity.imageAsset';
            };
            hotspot?: SanityImageHotspot;
            crop?: SanityImageCrop;
            _type: 'image';
            _key: string;
          }
      >;
      _type: 'item';
      _key: string;
    }>;
    _type: 'banner';
    _key: string;
  }>;
};

export type Post = {
  _id: string;
  _type: 'post';
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  orderRank?: string;
  title?: string;
  slug?: Slug;
  content?: Array<
    | {
        children?: Array<{
          marks?: Array<string>;
          text?: string;
          _type: 'span';
          _key: string;
        }>;
        style?: 'normal' | 'blockquote' | 'h2' | 'h3';
        listItem?: 'bullet';
        markDefs?: Array<{
          href?: string;
          _type: 'link';
          _key: string;
        }>;
        level?: number;
        _type: 'block';
        _key: string;
      }
    | {
        asset?: {
          _ref: string;
          _type: 'reference';
          _weak?: boolean;
          [internalGroqTypeReferenceTo]?: 'sanity.imageAsset';
        };
        hotspot?: SanityImageHotspot;
        crop?: SanityImageCrop;
        _type: 'image';
        _key: string;
      }
  >;
  unitBusiness?: {
    _ref: string;
    _type: 'reference';
    _weak?: boolean;
    [internalGroqTypeReferenceTo]?: 'unitBusiness';
  };
  resumen?: string;
  components?: Array<{
    orderRank?: string;
    isActive?: boolean;
    typeComponent?: {
      _ref: string;
      _type: 'reference';
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: 'component';
    };
    variant?: 'hero';
    background?: {
      _ref: string;
      _type: 'reference';
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: 'background';
    };
    imageBackground?: {
      asset?: {
        _ref: string;
        _type: 'reference';
        _weak?: boolean;
        [internalGroqTypeReferenceTo]?: 'sanity.imageAsset';
      };
      hotspot?: SanityImageHotspot;
      crop?: SanityImageCrop;
      _type: 'image';
    };
    videoUrl?: string;
    videoType?: 'mp4' | 'webm';
    content?: Array<{
      children?: Array<{
        marks?: Array<string>;
        text?: string;
        _type: 'span';
        _key: string;
      }>;
      style?: 'normal' | 'h1' | 'h2' | 'h3' | 'h4' | 'h5' | 'h6' | 'blockquote';
      listItem?: 'bullet' | 'number';
      markDefs?: Array<{
        href?: string;
        _type: 'link';
        _key: string;
      }>;
      level?: number;
      _type: 'block';
      _key: string;
    }>;
    PTextBanner?: string;
    imageContent?: {
      asset?: {
        _ref: string;
        _type: 'reference';
        _weak?: boolean;
        [internalGroqTypeReferenceTo]?: 'sanity.imageAsset';
      };
      hotspot?: SanityImageHotspot;
      crop?: SanityImageCrop;
      _type: 'image';
    };
    imagePosition?: 'left' | 'right' | 'top' | 'bottom';
    layoutItems?: string;
    PTextItem?: string;
    items?: Array<{
      orderRank?: string;
      isActive?: boolean;
      image?: {
        asset?: {
          _ref: string;
          _type: 'reference';
          _weak?: boolean;
          [internalGroqTypeReferenceTo]?: 'sanity.imageAsset';
        };
        hotspot?: SanityImageHotspot;
        crop?: SanityImageCrop;
        _type: 'image';
      };
      alt?: string;
      icon?: IconManager;
      svgIcon?: string;
      svgIconList?: Array<
        {
          _key: string;
        } & IconsListItem
      >;
      content?: Array<
        | {
            children?: Array<{
              marks?: Array<string>;
              text?: string;
              _type: 'span';
              _key: string;
            }>;
            style?:
              | 'normal'
              | 'h1'
              | 'h2'
              | 'h3'
              | 'h4'
              | 'h5'
              | 'h6'
              | 'blockquote';
            listItem?: 'bullet' | 'number';
            markDefs?: Array<{
              href?: string;
              _type: 'link';
              _key: string;
            }>;
            level?: number;
            _type: 'block';
            _key: string;
          }
        | {
            asset?: {
              _ref: string;
              _type: 'reference';
              _weak?: boolean;
              [internalGroqTypeReferenceTo]?: 'sanity.imageAsset';
            };
            hotspot?: SanityImageHotspot;
            crop?: SanityImageCrop;
            _type: 'image';
            _key: string;
          }
      >;
      _type: 'item';
      _key: string;
    }>;
    _type: 'banner';
    _key: string;
  }>;
  date?: string;
};

export type UnitBusiness = {
  _id: string;
  _type: 'unitBusiness';
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  orderRank?: string;
  title?: string;
  slug?: Slug;
  icon?: 'user' | 'menu';
  color?:
    | 'bg-red-100 text-red-800'
    | 'bg-blue-100 text-blue-800'
    | 'bg-yellow-100 text-yellow-800'
    | 'bg-green-100 text-green-800'
    | 'bg-purple-100 text-purple-800'
    | 'bg-orange-100 text-orange-800'
    | 'bg-gray-100 text-gray-800';
  description?: Array<
    | {
        children?: Array<{
          marks?: Array<string>;
          text?: string;
          _type: 'span';
          _key: string;
        }>;
        style?:
          | 'normal'
          | 'h1'
          | 'h2'
          | 'h3'
          | 'h4'
          | 'h5'
          | 'h6'
          | 'blockquote';
        listItem?: 'bullet' | 'number';
        markDefs?: Array<{
          href?: string;
          _type: 'link';
          _key: string;
        }>;
        level?: number;
        _type: 'block';
        _key: string;
      }
    | {
        asset?: {
          _ref: string;
          _type: 'reference';
          _weak?: boolean;
          [internalGroqTypeReferenceTo]?: 'sanity.imageAsset';
        };
        hotspot?: SanityImageHotspot;
        crop?: SanityImageCrop;
        _type: 'image';
        _key: string;
      }
  >;
};

export type Page = {
  _id: string;
  _type: 'page';
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  orderRank?: string;
  name?: string;
  slug?: Slug;
  isActive?: boolean;
  title?: string;
  isHome?: boolean;
  content?: Array<
    | {
        children?: Array<{
          marks?: Array<string>;
          text?: string;
          _type: 'span';
          _key: string;
        }>;
        style?:
          | 'normal'
          | 'h1'
          | 'h2'
          | 'h3'
          | 'h4'
          | 'h5'
          | 'h6'
          | 'blockquote';
        listItem?: 'bullet' | 'number';
        markDefs?: Array<{
          href?: string;
          _type: 'link';
          _key: string;
        }>;
        level?: number;
        _type: 'block';
        _key: string;
      }
    | {
        asset?: {
          _ref: string;
          _type: 'reference';
          _weak?: boolean;
          [internalGroqTypeReferenceTo]?: 'sanity.imageAsset';
        };
        hotspot?: SanityImageHotspot;
        crop?: SanityImageCrop;
        _type: 'image';
        _key: string;
      }
  >;
  components?: Array<{
    orderRank?: string;
    isActive?: boolean;
    typeComponent?: {
      _ref: string;
      _type: 'reference';
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: 'component';
    };
    variant?: 'hero';
    background?: {
      _ref: string;
      _type: 'reference';
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: 'background';
    };
    imageBackground?: {
      asset?: {
        _ref: string;
        _type: 'reference';
        _weak?: boolean;
        [internalGroqTypeReferenceTo]?: 'sanity.imageAsset';
      };
      hotspot?: SanityImageHotspot;
      crop?: SanityImageCrop;
      _type: 'image';
    };
    videoUrl?: string;
    videoType?: 'mp4' | 'webm';
    content?: Array<{
      children?: Array<{
        marks?: Array<string>;
        text?: string;
        _type: 'span';
        _key: string;
      }>;
      style?: 'normal' | 'h1' | 'h2' | 'h3' | 'h4' | 'h5' | 'h6' | 'blockquote';
      listItem?: 'bullet' | 'number';
      markDefs?: Array<{
        href?: string;
        _type: 'link';
        _key: string;
      }>;
      level?: number;
      _type: 'block';
      _key: string;
    }>;
    PTextBanner?: string;
    imageContent?: {
      asset?: {
        _ref: string;
        _type: 'reference';
        _weak?: boolean;
        [internalGroqTypeReferenceTo]?: 'sanity.imageAsset';
      };
      hotspot?: SanityImageHotspot;
      crop?: SanityImageCrop;
      _type: 'image';
    };
    imagePosition?: 'left' | 'right' | 'top' | 'bottom';
    layoutItems?: string;
    PTextItem?: string;
    items?: Array<{
      orderRank?: string;
      isActive?: boolean;
      image?: {
        asset?: {
          _ref: string;
          _type: 'reference';
          _weak?: boolean;
          [internalGroqTypeReferenceTo]?: 'sanity.imageAsset';
        };
        hotspot?: SanityImageHotspot;
        crop?: SanityImageCrop;
        _type: 'image';
      };
      alt?: string;
      icon?: IconManager;
      svgIcon?: string;
      svgIconList?: Array<
        {
          _key: string;
        } & IconsListItem
      >;
      content?: Array<
        | {
            children?: Array<{
              marks?: Array<string>;
              text?: string;
              _type: 'span';
              _key: string;
            }>;
            style?:
              | 'normal'
              | 'h1'
              | 'h2'
              | 'h3'
              | 'h4'
              | 'h5'
              | 'h6'
              | 'blockquote';
            listItem?: 'bullet' | 'number';
            markDefs?: Array<{
              href?: string;
              _type: 'link';
              _key: string;
            }>;
            level?: number;
            _type: 'block';
            _key: string;
          }
        | {
            asset?: {
              _ref: string;
              _type: 'reference';
              _weak?: boolean;
              [internalGroqTypeReferenceTo]?: 'sanity.imageAsset';
            };
            hotspot?: SanityImageHotspot;
            crop?: SanityImageCrop;
            _type: 'image';
            _key: string;
          }
      >;
      _type: 'item';
      _key: string;
    }>;
    _type: 'banner';
    _key: string;
  }>;
};

export type Item = {
  _id: string;
  _type: 'item';
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  orderRank?: string;
  isActive?: boolean;
  image?: {
    asset?: {
      _ref: string;
      _type: 'reference';
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: 'sanity.imageAsset';
    };
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    _type: 'image';
  };
  alt?: string;
  icon?: IconManager;
  svgIcon?: string;
  svgIconList?: Array<
    {
      _key: string;
    } & IconsListItem
  >;
  content?: Array<
    | {
        children?: Array<{
          marks?: Array<string>;
          text?: string;
          _type: 'span';
          _key: string;
        }>;
        style?:
          | 'normal'
          | 'h1'
          | 'h2'
          | 'h3'
          | 'h4'
          | 'h5'
          | 'h6'
          | 'blockquote';
        listItem?: 'bullet' | 'number';
        markDefs?: Array<{
          href?: string;
          _type: 'link';
          _key: string;
        }>;
        level?: number;
        _type: 'block';
        _key: string;
      }
    | {
        asset?: {
          _ref: string;
          _type: 'reference';
          _weak?: boolean;
          [internalGroqTypeReferenceTo]?: 'sanity.imageAsset';
        };
        hotspot?: SanityImageHotspot;
        crop?: SanityImageCrop;
        _type: 'image';
        _key: string;
      }
  >;
};

export type IconsListItem = {
  _type: 'iconsListItem';
  icon?: string;
  title?: string;
  subtitle?: string;
};

export type IconsList = Array<
  {
    _key: string;
  } & IconsListItem
>;

export type ColorItem = {
  _id: string;
  _type: 'colorItem';
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  name?: string;
  lightColor?: Color;
  darkColor?: Color;
  colorBackground1Position?: number;
};

export type Banner = {
  _id: string;
  _type: 'banner';
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  orderRank?: string;
  isActive?: boolean;
  typeComponent?: {
    _ref: string;
    _type: 'reference';
    _weak?: boolean;
    [internalGroqTypeReferenceTo]?: 'component';
  };
  variant?: 'hero';
  background?: {
    _ref: string;
    _type: 'reference';
    _weak?: boolean;
    [internalGroqTypeReferenceTo]?: 'background';
  };
  imageBackground?: {
    asset?: {
      _ref: string;
      _type: 'reference';
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: 'sanity.imageAsset';
    };
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    _type: 'image';
  };
  videoUrl?: string;
  videoType?: 'mp4' | 'webm';
  content?: Array<{
    children?: Array<{
      marks?: Array<string>;
      text?: string;
      _type: 'span';
      _key: string;
    }>;
    style?: 'normal' | 'h1' | 'h2' | 'h3' | 'h4' | 'h5' | 'h6' | 'blockquote';
    listItem?: 'bullet' | 'number';
    markDefs?: Array<{
      href?: string;
      _type: 'link';
      _key: string;
    }>;
    level?: number;
    _type: 'block';
    _key: string;
  }>;
  PTextBanner?: string;
  imageContent?: {
    asset?: {
      _ref: string;
      _type: 'reference';
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: 'sanity.imageAsset';
    };
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    _type: 'image';
  };
  imagePosition?: 'left' | 'right' | 'top' | 'bottom';
  layoutItems?: string;
  PTextItem?: string;
  items?: Array<{
    orderRank?: string;
    isActive?: boolean;
    image?: {
      asset?: {
        _ref: string;
        _type: 'reference';
        _weak?: boolean;
        [internalGroqTypeReferenceTo]?: 'sanity.imageAsset';
      };
      hotspot?: SanityImageHotspot;
      crop?: SanityImageCrop;
      _type: 'image';
    };
    alt?: string;
    icon?: IconManager;
    svgIcon?: string;
    svgIconList?: IconsList;
    content?: Array<
      | {
          children?: Array<{
            marks?: Array<string>;
            text?: string;
            _type: 'span';
            _key: string;
          }>;
          style?:
            | 'normal'
            | 'h1'
            | 'h2'
            | 'h3'
            | 'h4'
            | 'h5'
            | 'h6'
            | 'blockquote';
          listItem?: 'bullet' | 'number';
          markDefs?: Array<{
            href?: string;
            _type: 'link';
            _key: string;
          }>;
          level?: number;
          _type: 'block';
          _key: string;
        }
      | {
          asset?: {
            _ref: string;
            _type: 'reference';
            _weak?: boolean;
            [internalGroqTypeReferenceTo]?: 'sanity.imageAsset';
          };
          hotspot?: SanityImageHotspot;
          crop?: SanityImageCrop;
          _type: 'image';
          _key: string;
        }
    >;
    _type: 'item';
    _key: string;
  }>;
};

export type Component = {
  _id: string;
  _type: 'component';
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  name?: string;
  value?: string;
};

export type Background = {
  _id: string;
  _type: 'background';
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  name?: string;
  backgroundMode?: 'transparent' | 'image' | 'colors' | 'video' | 'items';
  imageBackgroundType?: 'fixed' | 'dynamic';
  colorWithDarkMode?: boolean;
  colorList?: Array<{
    _ref: string;
    _type: 'reference';
    _weak?: boolean;
    _key: string;
    [internalGroqTypeReferenceTo]?: 'colorItem';
  }>;
  directionDeg?: number;
  backgroundLayer?: {
    _ref: string;
    _type: 'reference';
    _weak?: boolean;
    [internalGroqTypeReferenceTo]?: 'layer';
  };
  responsiveHeight?: 'fit-max' | 'h-900';
  invertLayoutMobile?: boolean;
  invertLayoutDesk?: boolean;
};

export type Layer = {
  _id: string;
  _type: 'layer';
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  title?: string;
  value?: string;
};

export type Author = {
  _id: string;
  _type: 'author';
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  name?: string;
  picture?: {
    asset?: {
      _ref: string;
      _type: 'reference';
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: 'sanity.imageAsset';
    };
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    alt?: string;
    _type: 'image';
  };
};

export type Settings = {
  _id: string;
  _type: 'settings';
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  title?: string;
  description?: Array<{
    children?: Array<{
      marks?: Array<string>;
      text?: string;
      _type: 'span';
      _key: string;
    }>;
    style?: 'normal';
    listItem?: never;
    markDefs?: Array<{
      href?: string;
      _type: 'link';
      _key: string;
    }>;
    level?: number;
    _type: 'block';
    _key: string;
  }>;
  footer?: Array<{
    children?: Array<{
      marks?: Array<string>;
      text?: string;
      _type: 'span';
      _key: string;
    }>;
    style?: 'normal' | 'h1' | 'h2' | 'h3' | 'h4' | 'h5' | 'h6' | 'blockquote';
    listItem?: 'bullet' | 'number';
    markDefs?: Array<{
      href?: string;
      _type: 'link';
      _key: string;
    }>;
    level?: number;
    _type: 'block';
    _key: string;
  }>;
  ogImage?: {
    asset?: {
      _ref: string;
      _type: 'reference';
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: 'sanity.imageAsset';
    };
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    alt?: string;
    metadataBase?: string;
    _type: 'image';
  };
  withDarkTheme?: boolean;
  notFoundImage?: {
    asset?: {
      _ref: string;
      _type: 'reference';
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: 'sanity.imageAsset';
    };
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    _type: 'image';
  };
};

export type SanityImageCrop = {
  _type: 'sanity.imageCrop';
  top?: number;
  bottom?: number;
  left?: number;
  right?: number;
};

export type SanityImageHotspot = {
  _type: 'sanity.imageHotspot';
  x?: number;
  y?: number;
  height?: number;
  width?: number;
};

export type SanityImageAsset = {
  _id: string;
  _type: 'sanity.imageAsset';
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  originalFilename?: string;
  label?: string;
  title?: string;
  description?: string;
  altText?: string;
  sha1hash?: string;
  extension?: string;
  mimeType?: string;
  size?: number;
  assetId?: string;
  uploadId?: string;
  path?: string;
  url?: string;
  metadata?: SanityImageMetadata;
  source?: SanityAssetSourceData;
};

export type SanityAssetSourceData = {
  _type: 'sanity.assetSourceData';
  name?: string;
  id?: string;
  url?: string;
};

export type SanityImageMetadata = {
  _type: 'sanity.imageMetadata';
  location?: Geopoint;
  dimensions?: SanityImageDimensions;
  palette?: SanityImagePalette;
  lqip?: string;
  blurHash?: string;
  hasAlpha?: boolean;
  isOpaque?: boolean;
};

export type SanityAssistInstructionTask = {
  _type: 'sanity.assist.instructionTask';
  path?: string;
  instructionKey?: string;
  started?: string;
  updated?: string;
  info?: string;
};

export type SanityAssistTaskStatus = {
  _type: 'sanity.assist.task.status';
  tasks?: Array<
    {
      _key: string;
    } & SanityAssistInstructionTask
  >;
};

export type SanityAssistSchemaTypeAnnotations = {
  _type: 'sanity.assist.schemaType.annotations';
  title?: string;
  fields?: Array<
    {
      _key: string;
    } & SanityAssistSchemaTypeField
  >;
};

export type SanityAssistOutputType = {
  _type: 'sanity.assist.output.type';
  type?: string;
};

export type SanityAssistOutputField = {
  _type: 'sanity.assist.output.field';
  path?: string;
};

export type SanityAssistInstructionContext = {
  _type: 'sanity.assist.instruction.context';
  reference?: {
    _ref: string;
    _type: 'reference';
    _weak?: boolean;
    [internalGroqTypeReferenceTo]?: 'assist.instruction.context';
  };
};

export type AssistInstructionContext = {
  _id: string;
  _type: 'assist.instruction.context';
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  title?: string;
  context?: Array<{
    children?: Array<{
      marks?: Array<string>;
      text?: string;
      _type: 'span';
      _key: string;
    }>;
    style?: 'normal';
    listItem?: never;
    markDefs?: null;
    level?: number;
    _type: 'block';
    _key: string;
  }>;
};

export type SanityAssistInstructionUserInput = {
  _type: 'sanity.assist.instruction.userInput';
  message?: string;
  description?: string;
};

export type SanityAssistInstructionPrompt = Array<{
  children?: Array<
    | {
        marks?: Array<string>;
        text?: string;
        _type: 'span';
        _key: string;
      }
    | ({
        _key: string;
      } & SanityAssistInstructionFieldRef)
    | ({
        _key: string;
      } & SanityAssistInstructionContext)
    | ({
        _key: string;
      } & SanityAssistInstructionUserInput)
  >;
  style?: 'normal';
  listItem?: never;
  markDefs?: null;
  level?: number;
  _type: 'block';
  _key: string;
}>;

export type SanityAssistInstructionFieldRef = {
  _type: 'sanity.assist.instruction.fieldRef';
  path?: string;
};

export type SanityAssistInstruction = {
  _type: 'sanity.assist.instruction';
  prompt?: SanityAssistInstructionPrompt;
  icon?: string;
  title?: string;
  userId?: string;
  createdById?: string;
  output?: Array<
    | ({
        _key: string;
      } & SanityAssistOutputField)
    | ({
        _key: string;
      } & SanityAssistOutputType)
  >;
};

export type SanityAssistSchemaTypeField = {
  _type: 'sanity.assist.schemaType.field';
  path?: string;
  instructions?: Array<
    {
      _key: string;
    } & SanityAssistInstruction
  >;
};

export type InlineSvg = string;

export type IconManager = {
  _type: 'icon.manager';
  icon?: string;
  metadata?: IconManagerMetadata;
};

export type IconManagerMetadata = {
  _type: 'icon.manager.metadata';
  downloadUrl?: string;
  url?: string;
  inlineSvg?: string;
  collectionId?: string;
  collectionName?: string;
  iconName?: string;
  palette?: boolean;
  license?: IconManagerLicense;
  author?: IconManagerAuthor;
  size?: IconManagerSize;
  hFlip?: boolean;
  vFlip?: boolean;
  rotate?: number;
  color?: IconManagerColor;
};

export type IconManagerLicense = {
  _type: 'icon.manager.license';
  name?: string;
  url?: string;
};

export type IconManagerAuthor = {
  _type: 'icon.manager.author';
  name?: string;
  url?: string;
};

export type IconManagerSize = {
  _type: 'icon.manager.size';
  width?: number;
  height?: number;
};

export type IconManagerColor = {
  _type: 'icon.manager.color';
  hex?: string;
  rgba?: IconManagerColorRgba;
};

export type IconManagerColorRgba = {
  _type: 'icon.manager.color.rgba';
  r?: number;
  g?: number;
  b?: number;
  a?: number;
};

export type MediaTag = {
  _id: string;
  _type: 'media.tag';
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  name?: Slug;
};

export type Slug = {
  _type: 'slug';
  current?: string;
  source?: string;
};

export type Color = {
  _type: 'color';
  hex?: string;
  alpha?: number;
  hsl?: HslaColor;
  hsv?: HsvaColor;
  rgb?: RgbaColor;
};

export type RgbaColor = {
  _type: 'rgbaColor';
  r?: number;
  g?: number;
  b?: number;
  a?: number;
};

export type HsvaColor = {
  _type: 'hsvaColor';
  h?: number;
  s?: number;
  v?: number;
  a?: number;
};

export type HslaColor = {
  _type: 'hslaColor';
  h?: number;
  s?: number;
  l?: number;
  a?: number;
};

export type AllSanitySchemaTypes =
  | SanityImagePaletteSwatch
  | SanityImagePalette
  | SanityImageDimensions
  | SanityFileAsset
  | Geopoint
  | Service
  | Post
  | UnitBusiness
  | Page
  | Item
  | IconsListItem
  | IconsList
  | ColorItem
  | Banner
  | Component
  | Background
  | Layer
  | Author
  | Settings
  | SanityImageCrop
  | SanityImageHotspot
  | SanityImageAsset
  | SanityAssetSourceData
  | SanityImageMetadata
  | SanityAssistInstructionTask
  | SanityAssistTaskStatus
  | SanityAssistSchemaTypeAnnotations
  | SanityAssistOutputType
  | SanityAssistOutputField
  | SanityAssistInstructionContext
  | AssistInstructionContext
  | SanityAssistInstructionUserInput
  | SanityAssistInstructionPrompt
  | SanityAssistInstructionFieldRef
  | SanityAssistInstruction
  | SanityAssistSchemaTypeField
  | InlineSvg
  | IconManager
  | IconManagerMetadata
  | IconManagerLicense
  | IconManagerAuthor
  | IconManagerSize
  | IconManagerColor
  | IconManagerColorRgba
  | MediaTag
  | Slug
  | Color
  | RgbaColor
  | HsvaColor
  | HslaColor;
export declare const internalGroqTypeReferenceTo: unique symbol;
// Source: ./sanity/lib/queries.ts
// Variable: settingsQuery
// Query: *[_type == "settings"][0]
export type SettingsQueryResult = {
  _id: string;
  _type: 'settings';
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  title?: string;
  description?: Array<{
    children?: Array<{
      marks?: Array<string>;
      text?: string;
      _type: 'span';
      _key: string;
    }>;
    style?: 'normal';
    listItem?: never;
    markDefs?: Array<{
      href?: string;
      _type: 'link';
      _key: string;
    }>;
    level?: number;
    _type: 'block';
    _key: string;
  }>;
  footer?: Array<{
    children?: Array<{
      marks?: Array<string>;
      text?: string;
      _type: 'span';
      _key: string;
    }>;
    style?: 'blockquote' | 'h1' | 'h2' | 'h3' | 'h4' | 'h5' | 'h6' | 'normal';
    listItem?: 'bullet' | 'number';
    markDefs?: Array<{
      href?: string;
      _type: 'link';
      _key: string;
    }>;
    level?: number;
    _type: 'block';
    _key: string;
  }>;
  ogImage?: {
    asset?: {
      _ref: string;
      _type: 'reference';
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: 'sanity.imageAsset';
    };
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    alt?: string;
    metadataBase?: string;
    _type: 'image';
  };
  withDarkTheme?: boolean;
  notFoundImage?: {
    asset?: {
      _ref: string;
      _type: 'reference';
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: 'sanity.imageAsset';
    };
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    _type: 'image';
  };
} | null;
// Variable: heroQuery
// Query: *[_type == "post" && defined(slug.current)] | order(date desc, _updatedAt desc) [0] {    content,      _id,  "status": select(_originalId in path("drafts.**") => "draft", "published"),  "title": coalesce(title, "Untitled"),  "slug": slug.current,  excerpt,  coverImage,  "date": coalesce(date, _updatedAt),  "author": author->{"name": coalesce(name, "Anonymous"), picture},  }
export type HeroQueryResult = {
  content: Array<
    | {
        children?: Array<{
          marks?: Array<string>;
          text?: string;
          _type: 'span';
          _key: string;
        }>;
        style?: 'blockquote' | 'h2' | 'h3' | 'normal';
        listItem?: 'bullet';
        markDefs?: Array<{
          href?: string;
          _type: 'link';
          _key: string;
        }>;
        level?: number;
        _type: 'block';
        _key: string;
      }
    | {
        asset?: {
          _ref: string;
          _type: 'reference';
          _weak?: boolean;
          [internalGroqTypeReferenceTo]?: 'sanity.imageAsset';
        };
        hotspot?: SanityImageHotspot;
        crop?: SanityImageCrop;
        _type: 'image';
        _key: string;
      }
  > | null;
  _id: string;
  status: 'draft' | 'published';
  title: string | 'Untitled';
  slug: string | null;
  excerpt: null;
  coverImage: null;
  date: string;
  author: null;
} | null;
// Variable: moreStoriesQuery
// Query: *[_type == "post" && _id != $skip && defined(slug.current)] | order(date desc, _updatedAt desc) [0...$limit] {      _id,  "status": select(_originalId in path("drafts.**") => "draft", "published"),  "title": coalesce(title, "Untitled"),  "slug": slug.current,  excerpt,  coverImage,  "date": coalesce(date, _updatedAt),  "author": author->{"name": coalesce(name, "Anonymous"), picture},  }
export type MoreStoriesQueryResult = Array<{
  _id: string;
  status: 'draft' | 'published';
  title: string | 'Untitled';
  slug: string | null;
  excerpt: null;
  coverImage: null;
  date: string;
  author: null;
}>;
// Variable: postQuery
// Query: *[_type == "post" && slug.current == $slug] [0] {    content,      _id,  "status": select(_originalId in path("drafts.**") => "draft", "published"),  "title": coalesce(title, "Untitled"),  "slug": slug.current,  excerpt,  coverImage,  "date": coalesce(date, _updatedAt),  "author": author->{"name": coalesce(name, "Anonymous"), picture},  }
export type PostQueryResult = {
  content: Array<
    | {
        children?: Array<{
          marks?: Array<string>;
          text?: string;
          _type: 'span';
          _key: string;
        }>;
        style?: 'blockquote' | 'h2' | 'h3' | 'normal';
        listItem?: 'bullet';
        markDefs?: Array<{
          href?: string;
          _type: 'link';
          _key: string;
        }>;
        level?: number;
        _type: 'block';
        _key: string;
      }
    | {
        asset?: {
          _ref: string;
          _type: 'reference';
          _weak?: boolean;
          [internalGroqTypeReferenceTo]?: 'sanity.imageAsset';
        };
        hotspot?: SanityImageHotspot;
        crop?: SanityImageCrop;
        _type: 'image';
        _key: string;
      }
  > | null;
  _id: string;
  status: 'draft' | 'published';
  title: string | 'Untitled';
  slug: string | null;
  excerpt: null;
  coverImage: null;
  date: string;
  author: null;
} | null;
// Variable: getComponentListQuery
// Query: *[_type == 'component']{  value, name}
export type GetComponentListQueryResult = Array<{
  value: string | null;
  name: string | null;
}>;
// Variable: getIconListQuery
// Query: *[_type == 'icon']{  value, name}
export type GetIconListQueryResult = Array<never>;
// Variable: getReactIconListQuery
// Query: *[_type == 'reactIcon']{  iconGroup, iconName}
export type GetReactIconListQueryResult = Array<never>;

// Source: ./sanity/lib/queries/page.query.ts
// Variable: getPagesNavQuery
// Query: *[_type == 'page' && isActive] | order(orderRank asc) {      "id": coalesce(_id, ""),       "name": coalesce(name, title),      title,      "slug": select(        isHome == true => "",        slug.current      ),      isHome,      orderRank,      isActive    }
export type GetPagesNavQueryResult = Array<{
  id: string;
  name: string | null;
  title: string | null;
  slug: string | '' | null;
  isHome: boolean | null;
  orderRank: string | null;
  isActive: boolean | null;
}>;
// Variable: getPageDetailQuery
// Query: *[_type == 'page' && slug.current == $slug][0] {        "id": _id,    name,    "slug": slug.current,    isActive,    title,    content,    components[isActive] | order(orderRank) {   isActive,  typeComponent,  "typeComponentValue": typeComponent->value,  variant,  imageBackground,  'backgroundValue': background-> {   name,  backgroundMode,  imageBackgroundType,  colorWithDarkMode,  colorList,  "colors": colorList[]-> {    "lightColor": lightColor{      "rgb": rgb,      "alpha": alpha,      "hex": hex    },    "darkColor": darkColor{      "rgb": rgb,      "alpha": alpha,      "hex": hex    },    colorBackground1Position  },  directionDeg,  "layer" : backgroundLayer -> value,  responsiveHeight,  invertLayoutMobile,  invertLayoutDesk},  content,  PTextBanner,  imageContent,  imagePosition,  videoUrl,  videoType,  layoutItems,  PTextItem,  orderRank,  items[isActive == true]  | order(orderRank) {    isActive,    image,    icon,    svgIcon,    svgIconList,    alt,    content  } }    }
export type GetPageDetailQueryResult = {
  id: string;
  name: string | null;
  slug: string | null;
  isActive: boolean | null;
  title: string | null;
  content: Array<
    | {
        children?: Array<{
          marks?: Array<string>;
          text?: string;
          _type: 'span';
          _key: string;
        }>;
        style?:
          | 'blockquote'
          | 'h1'
          | 'h2'
          | 'h3'
          | 'h4'
          | 'h5'
          | 'h6'
          | 'normal';
        listItem?: 'bullet' | 'number';
        markDefs?: Array<{
          href?: string;
          _type: 'link';
          _key: string;
        }>;
        level?: number;
        _type: 'block';
        _key: string;
      }
    | {
        asset?: {
          _ref: string;
          _type: 'reference';
          _weak?: boolean;
          [internalGroqTypeReferenceTo]?: 'sanity.imageAsset';
        };
        hotspot?: SanityImageHotspot;
        crop?: SanityImageCrop;
        _type: 'image';
        _key: string;
      }
  > | null;
  components: Array<{
    isActive: boolean | null;
    typeComponent: {
      _ref: string;
      _type: 'reference';
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: 'component';
    } | null;
    typeComponentValue: string | null;
    variant: 'hero' | null;
    imageBackground: {
      asset?: {
        _ref: string;
        _type: 'reference';
        _weak?: boolean;
        [internalGroqTypeReferenceTo]?: 'sanity.imageAsset';
      };
      hotspot?: SanityImageHotspot;
      crop?: SanityImageCrop;
      _type: 'image';
    } | null;
    backgroundValue: {
      name: string | null;
      backgroundMode:
        | 'colors'
        | 'image'
        | 'items'
        | 'transparent'
        | 'video'
        | null;
      imageBackgroundType: 'dynamic' | 'fixed' | null;
      colorWithDarkMode: boolean | null;
      colorList: Array<{
        _ref: string;
        _type: 'reference';
        _weak?: boolean;
        _key: string;
        [internalGroqTypeReferenceTo]?: 'colorItem';
      }> | null;
      colors: Array<{
        lightColor: {
          rgb: RgbaColor | null;
          alpha: number | null;
          hex: string | null;
        } | null;
        darkColor: {
          rgb: RgbaColor | null;
          alpha: number | null;
          hex: string | null;
        } | null;
        colorBackground1Position: number | null;
      }> | null;
      directionDeg: number | null;
      layer: string | null;
      responsiveHeight: 'fit-max' | 'h-900' | null;
      invertLayoutMobile: boolean | null;
      invertLayoutDesk: boolean | null;
    } | null;
    content: Array<{
      children?: Array<{
        marks?: Array<string>;
        text?: string;
        _type: 'span';
        _key: string;
      }>;
      style?: 'blockquote' | 'h1' | 'h2' | 'h3' | 'h4' | 'h5' | 'h6' | 'normal';
      listItem?: 'bullet' | 'number';
      markDefs?: Array<{
        href?: string;
        _type: 'link';
        _key: string;
      }>;
      level?: number;
      _type: 'block';
      _key: string;
    }> | null;
    PTextBanner: string | null;
    imageContent: {
      asset?: {
        _ref: string;
        _type: 'reference';
        _weak?: boolean;
        [internalGroqTypeReferenceTo]?: 'sanity.imageAsset';
      };
      hotspot?: SanityImageHotspot;
      crop?: SanityImageCrop;
      _type: 'image';
    } | null;
    imagePosition: 'bottom' | 'left' | 'right' | 'top' | null;
    videoUrl: string | null;
    videoType: 'mp4' | 'webm' | null;
    layoutItems: string | null;
    PTextItem: string | null;
    orderRank: string | null;
    items: Array<{
      isActive: boolean | null;
      image: {
        asset?: {
          _ref: string;
          _type: 'reference';
          _weak?: boolean;
          [internalGroqTypeReferenceTo]?: 'sanity.imageAsset';
        };
        hotspot?: SanityImageHotspot;
        crop?: SanityImageCrop;
        _type: 'image';
      } | null;
      icon: IconManager | null;
      svgIcon: string | null;
      svgIconList: Array<
        {
          _key: string;
        } & IconsListItem
      > | null;
      alt: string | null;
      content: Array<
        | {
            children?: Array<{
              marks?: Array<string>;
              text?: string;
              _type: 'span';
              _key: string;
            }>;
            style?:
              | 'blockquote'
              | 'h1'
              | 'h2'
              | 'h3'
              | 'h4'
              | 'h5'
              | 'h6'
              | 'normal';
            listItem?: 'bullet' | 'number';
            markDefs?: Array<{
              href?: string;
              _type: 'link';
              _key: string;
            }>;
            level?: number;
            _type: 'block';
            _key: string;
          }
        | {
            asset?: {
              _ref: string;
              _type: 'reference';
              _weak?: boolean;
              [internalGroqTypeReferenceTo]?: 'sanity.imageAsset';
            };
            hotspot?: SanityImageHotspot;
            crop?: SanityImageCrop;
            _type: 'image';
            _key: string;
          }
      > | null;
    }> | null;
  }> | null;
} | null;

// Source: ./sanity/lib/queries/post.query.ts
// Variable: getPostListQuery
// Query: *[_type == 'post'] | order(orderRank desc) {        title,  slug,  "unitBusiness": {    "title": coalesce(unitBusiness->title, "Sin título"),    "icon": coalesce(unitBusiness->icon, "/default-icon.png"),    "slug": coalesce(unitBusiness->slug.current, "default-slug"),    "color": coalesce(unitBusiness->color, "bg-gray-100")  },  orderRank,  components[isActive] | order(orderRank) {   isActive,  typeComponent,  "typeComponentValue": typeComponent->value,  variant,  imageBackground,  'backgroundValue': background-> {   name,  backgroundMode,  imageBackgroundType,  colorWithDarkMode,  colorList,  "colors": colorList[]-> {    "lightColor": lightColor{      "rgb": rgb,      "alpha": alpha,      "hex": hex    },    "darkColor": darkColor{      "rgb": rgb,      "alpha": alpha,      "hex": hex    },    colorBackground1Position  },  directionDeg,  "layer" : backgroundLayer -> value,  responsiveHeight,  invertLayoutMobile,  invertLayoutDesk},  content,  PTextBanner,  imageContent,  imagePosition,  videoUrl,  videoType,  layoutItems,  PTextItem,  orderRank,  items[isActive == true]  | order(orderRank) {    isActive,    image,    icon,    svgIcon,    svgIconList,    alt,    content  } },  "resumen": coalesce(    resumen,    array::join(content[_type == "block" && style == "normal"][0].children[].text, " ")  ),  date        }
export type GetPostListQueryResult = Array<{
  title: string | null;
  slug: Slug | null;
  unitBusiness: {
    title: string | 'Sin t\xEDtulo';
    icon: '/default-icon.png' | 'menu' | 'user';
    slug: string | 'default-slug';
    color:
      | 'bg-blue-100 text-blue-800'
      | 'bg-gray-100 text-gray-800'
      | 'bg-gray-100'
      | 'bg-green-100 text-green-800'
      | 'bg-orange-100 text-orange-800'
      | 'bg-purple-100 text-purple-800'
      | 'bg-red-100 text-red-800'
      | 'bg-yellow-100 text-yellow-800';
  };
  orderRank: string | null;
  components: Array<{
    isActive: boolean | null;
    typeComponent: {
      _ref: string;
      _type: 'reference';
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: 'component';
    } | null;
    typeComponentValue: string | null;
    variant: 'hero' | null;
    imageBackground: {
      asset?: {
        _ref: string;
        _type: 'reference';
        _weak?: boolean;
        [internalGroqTypeReferenceTo]?: 'sanity.imageAsset';
      };
      hotspot?: SanityImageHotspot;
      crop?: SanityImageCrop;
      _type: 'image';
    } | null;
    backgroundValue: {
      name: string | null;
      backgroundMode:
        | 'colors'
        | 'image'
        | 'items'
        | 'transparent'
        | 'video'
        | null;
      imageBackgroundType: 'dynamic' | 'fixed' | null;
      colorWithDarkMode: boolean | null;
      colorList: Array<{
        _ref: string;
        _type: 'reference';
        _weak?: boolean;
        _key: string;
        [internalGroqTypeReferenceTo]?: 'colorItem';
      }> | null;
      colors: Array<{
        lightColor: {
          rgb: RgbaColor | null;
          alpha: number | null;
          hex: string | null;
        } | null;
        darkColor: {
          rgb: RgbaColor | null;
          alpha: number | null;
          hex: string | null;
        } | null;
        colorBackground1Position: number | null;
      }> | null;
      directionDeg: number | null;
      layer: string | null;
      responsiveHeight: 'fit-max' | 'h-900' | null;
      invertLayoutMobile: boolean | null;
      invertLayoutDesk: boolean | null;
    } | null;
    content: Array<{
      children?: Array<{
        marks?: Array<string>;
        text?: string;
        _type: 'span';
        _key: string;
      }>;
      style?: 'blockquote' | 'h1' | 'h2' | 'h3' | 'h4' | 'h5' | 'h6' | 'normal';
      listItem?: 'bullet' | 'number';
      markDefs?: Array<{
        href?: string;
        _type: 'link';
        _key: string;
      }>;
      level?: number;
      _type: 'block';
      _key: string;
    }> | null;
    PTextBanner: string | null;
    imageContent: {
      asset?: {
        _ref: string;
        _type: 'reference';
        _weak?: boolean;
        [internalGroqTypeReferenceTo]?: 'sanity.imageAsset';
      };
      hotspot?: SanityImageHotspot;
      crop?: SanityImageCrop;
      _type: 'image';
    } | null;
    imagePosition: 'bottom' | 'left' | 'right' | 'top' | null;
    videoUrl: string | null;
    videoType: 'mp4' | 'webm' | null;
    layoutItems: string | null;
    PTextItem: string | null;
    orderRank: string | null;
    items: Array<{
      isActive: boolean | null;
      image: {
        asset?: {
          _ref: string;
          _type: 'reference';
          _weak?: boolean;
          [internalGroqTypeReferenceTo]?: 'sanity.imageAsset';
        };
        hotspot?: SanityImageHotspot;
        crop?: SanityImageCrop;
        _type: 'image';
      } | null;
      icon: IconManager | null;
      svgIcon: string | null;
      svgIconList: Array<
        {
          _key: string;
        } & IconsListItem
      > | null;
      alt: string | null;
      content: Array<
        | {
            children?: Array<{
              marks?: Array<string>;
              text?: string;
              _type: 'span';
              _key: string;
            }>;
            style?:
              | 'blockquote'
              | 'h1'
              | 'h2'
              | 'h3'
              | 'h4'
              | 'h5'
              | 'h6'
              | 'normal';
            listItem?: 'bullet' | 'number';
            markDefs?: Array<{
              href?: string;
              _type: 'link';
              _key: string;
            }>;
            level?: number;
            _type: 'block';
            _key: string;
          }
        | {
            asset?: {
              _ref: string;
              _type: 'reference';
              _weak?: boolean;
              [internalGroqTypeReferenceTo]?: 'sanity.imageAsset';
            };
            hotspot?: SanityImageHotspot;
            crop?: SanityImageCrop;
            _type: 'image';
            _key: string;
          }
      > | null;
    }> | null;
  }> | null;
  resumen: string | null;
  date: string | null;
}>;
// Variable: getPostListByUnitBusinessQuery
// Query: *[_type == 'post' && unitBusiness->slug.current == $slug] {        title,  slug,  "unitBusiness": {    "title": coalesce(unitBusiness->title, "Sin título"),    "icon": coalesce(unitBusiness->icon, "/default-icon.png"),    "slug": coalesce(unitBusiness->slug.current, "default-slug"),    "color": coalesce(unitBusiness->color, "bg-gray-100")  },  orderRank,  components[isActive] | order(orderRank) {   isActive,  typeComponent,  "typeComponentValue": typeComponent->value,  variant,  imageBackground,  'backgroundValue': background-> {   name,  backgroundMode,  imageBackgroundType,  colorWithDarkMode,  colorList,  "colors": colorList[]-> {    "lightColor": lightColor{      "rgb": rgb,      "alpha": alpha,      "hex": hex    },    "darkColor": darkColor{      "rgb": rgb,      "alpha": alpha,      "hex": hex    },    colorBackground1Position  },  directionDeg,  "layer" : backgroundLayer -> value,  responsiveHeight,  invertLayoutMobile,  invertLayoutDesk},  content,  PTextBanner,  imageContent,  imagePosition,  videoUrl,  videoType,  layoutItems,  PTextItem,  orderRank,  items[isActive == true]  | order(orderRank) {    isActive,    image,    icon,    svgIcon,    svgIconList,    alt,    content  } },  "resumen": coalesce(    resumen,    array::join(content[_type == "block" && style == "normal"][0].children[].text, " ")  ),  date        }
export type GetPostListByUnitBusinessQueryResult = Array<{
  title: string | null;
  slug: Slug | null;
  unitBusiness: {
    title: string | 'Sin t\xEDtulo';
    icon: '/default-icon.png' | 'menu' | 'user';
    slug: string | 'default-slug';
    color:
      | 'bg-blue-100 text-blue-800'
      | 'bg-gray-100 text-gray-800'
      | 'bg-gray-100'
      | 'bg-green-100 text-green-800'
      | 'bg-orange-100 text-orange-800'
      | 'bg-purple-100 text-purple-800'
      | 'bg-red-100 text-red-800'
      | 'bg-yellow-100 text-yellow-800';
  };
  orderRank: string | null;
  components: Array<{
    isActive: boolean | null;
    typeComponent: {
      _ref: string;
      _type: 'reference';
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: 'component';
    } | null;
    typeComponentValue: string | null;
    variant: 'hero' | null;
    imageBackground: {
      asset?: {
        _ref: string;
        _type: 'reference';
        _weak?: boolean;
        [internalGroqTypeReferenceTo]?: 'sanity.imageAsset';
      };
      hotspot?: SanityImageHotspot;
      crop?: SanityImageCrop;
      _type: 'image';
    } | null;
    backgroundValue: {
      name: string | null;
      backgroundMode:
        | 'colors'
        | 'image'
        | 'items'
        | 'transparent'
        | 'video'
        | null;
      imageBackgroundType: 'dynamic' | 'fixed' | null;
      colorWithDarkMode: boolean | null;
      colorList: Array<{
        _ref: string;
        _type: 'reference';
        _weak?: boolean;
        _key: string;
        [internalGroqTypeReferenceTo]?: 'colorItem';
      }> | null;
      colors: Array<{
        lightColor: {
          rgb: RgbaColor | null;
          alpha: number | null;
          hex: string | null;
        } | null;
        darkColor: {
          rgb: RgbaColor | null;
          alpha: number | null;
          hex: string | null;
        } | null;
        colorBackground1Position: number | null;
      }> | null;
      directionDeg: number | null;
      layer: string | null;
      responsiveHeight: 'fit-max' | 'h-900' | null;
      invertLayoutMobile: boolean | null;
      invertLayoutDesk: boolean | null;
    } | null;
    content: Array<{
      children?: Array<{
        marks?: Array<string>;
        text?: string;
        _type: 'span';
        _key: string;
      }>;
      style?: 'blockquote' | 'h1' | 'h2' | 'h3' | 'h4' | 'h5' | 'h6' | 'normal';
      listItem?: 'bullet' | 'number';
      markDefs?: Array<{
        href?: string;
        _type: 'link';
        _key: string;
      }>;
      level?: number;
      _type: 'block';
      _key: string;
    }> | null;
    PTextBanner: string | null;
    imageContent: {
      asset?: {
        _ref: string;
        _type: 'reference';
        _weak?: boolean;
        [internalGroqTypeReferenceTo]?: 'sanity.imageAsset';
      };
      hotspot?: SanityImageHotspot;
      crop?: SanityImageCrop;
      _type: 'image';
    } | null;
    imagePosition: 'bottom' | 'left' | 'right' | 'top' | null;
    videoUrl: string | null;
    videoType: 'mp4' | 'webm' | null;
    layoutItems: string | null;
    PTextItem: string | null;
    orderRank: string | null;
    items: Array<{
      isActive: boolean | null;
      image: {
        asset?: {
          _ref: string;
          _type: 'reference';
          _weak?: boolean;
          [internalGroqTypeReferenceTo]?: 'sanity.imageAsset';
        };
        hotspot?: SanityImageHotspot;
        crop?: SanityImageCrop;
        _type: 'image';
      } | null;
      icon: IconManager | null;
      svgIcon: string | null;
      svgIconList: Array<
        {
          _key: string;
        } & IconsListItem
      > | null;
      alt: string | null;
      content: Array<
        | {
            children?: Array<{
              marks?: Array<string>;
              text?: string;
              _type: 'span';
              _key: string;
            }>;
            style?:
              | 'blockquote'
              | 'h1'
              | 'h2'
              | 'h3'
              | 'h4'
              | 'h5'
              | 'h6'
              | 'normal';
            listItem?: 'bullet' | 'number';
            markDefs?: Array<{
              href?: string;
              _type: 'link';
              _key: string;
            }>;
            level?: number;
            _type: 'block';
            _key: string;
          }
        | {
            asset?: {
              _ref: string;
              _type: 'reference';
              _weak?: boolean;
              [internalGroqTypeReferenceTo]?: 'sanity.imageAsset';
            };
            hotspot?: SanityImageHotspot;
            crop?: SanityImageCrop;
            _type: 'image';
            _key: string;
          }
      > | null;
    }> | null;
  }> | null;
  resumen: string | null;
  date: string | null;
}>;
// Variable: getPostDetailQuery
// Query: *[_type == 'post' && slug.current == $slug][0] {      title,  slug,  "unitBusiness": {    "title": coalesce(unitBusiness->title, "Sin título"),    "icon": coalesce(unitBusiness->icon, "/default-icon.png"),    "slug": coalesce(unitBusiness->slug.current, "default-slug"),    "color": coalesce(unitBusiness->color, "bg-gray-100")  },  orderRank,  components[isActive] | order(orderRank) {   isActive,  typeComponent,  "typeComponentValue": typeComponent->value,  variant,  imageBackground,  'backgroundValue': background-> {   name,  backgroundMode,  imageBackgroundType,  colorWithDarkMode,  colorList,  "colors": colorList[]-> {    "lightColor": lightColor{      "rgb": rgb,      "alpha": alpha,      "hex": hex    },    "darkColor": darkColor{      "rgb": rgb,      "alpha": alpha,      "hex": hex    },    colorBackground1Position  },  directionDeg,  "layer" : backgroundLayer -> value,  responsiveHeight,  invertLayoutMobile,  invertLayoutDesk},  content,  PTextBanner,  imageContent,  imagePosition,  videoUrl,  videoType,  layoutItems,  PTextItem,  orderRank,  items[isActive == true]  | order(orderRank) {    isActive,    image,    icon,    svgIcon,    svgIconList,    alt,    content  } },  "resumen": coalesce(    resumen,    array::join(content[_type == "block" && style == "normal"][0].children[].text, " ")  ),  date  ,    content,    "tableOfContents" : content[style in ['h2', 'h3']] {      _key,      style,      'text':children[0].text     }  }
export type GetPostDetailQueryResult = {
  title: string | null;
  slug: Slug | null;
  unitBusiness: {
    title: string | 'Sin t\xEDtulo';
    icon: '/default-icon.png' | 'menu' | 'user';
    slug: string | 'default-slug';
    color:
      | 'bg-blue-100 text-blue-800'
      | 'bg-gray-100 text-gray-800'
      | 'bg-gray-100'
      | 'bg-green-100 text-green-800'
      | 'bg-orange-100 text-orange-800'
      | 'bg-purple-100 text-purple-800'
      | 'bg-red-100 text-red-800'
      | 'bg-yellow-100 text-yellow-800';
  };
  orderRank: string | null;
  components: Array<{
    isActive: boolean | null;
    typeComponent: {
      _ref: string;
      _type: 'reference';
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: 'component';
    } | null;
    typeComponentValue: string | null;
    variant: 'hero' | null;
    imageBackground: {
      asset?: {
        _ref: string;
        _type: 'reference';
        _weak?: boolean;
        [internalGroqTypeReferenceTo]?: 'sanity.imageAsset';
      };
      hotspot?: SanityImageHotspot;
      crop?: SanityImageCrop;
      _type: 'image';
    } | null;
    backgroundValue: {
      name: string | null;
      backgroundMode:
        | 'colors'
        | 'image'
        | 'items'
        | 'transparent'
        | 'video'
        | null;
      imageBackgroundType: 'dynamic' | 'fixed' | null;
      colorWithDarkMode: boolean | null;
      colorList: Array<{
        _ref: string;
        _type: 'reference';
        _weak?: boolean;
        _key: string;
        [internalGroqTypeReferenceTo]?: 'colorItem';
      }> | null;
      colors: Array<{
        lightColor: {
          rgb: RgbaColor | null;
          alpha: number | null;
          hex: string | null;
        } | null;
        darkColor: {
          rgb: RgbaColor | null;
          alpha: number | null;
          hex: string | null;
        } | null;
        colorBackground1Position: number | null;
      }> | null;
      directionDeg: number | null;
      layer: string | null;
      responsiveHeight: 'fit-max' | 'h-900' | null;
      invertLayoutMobile: boolean | null;
      invertLayoutDesk: boolean | null;
    } | null;
    content: Array<{
      children?: Array<{
        marks?: Array<string>;
        text?: string;
        _type: 'span';
        _key: string;
      }>;
      style?: 'blockquote' | 'h1' | 'h2' | 'h3' | 'h4' | 'h5' | 'h6' | 'normal';
      listItem?: 'bullet' | 'number';
      markDefs?: Array<{
        href?: string;
        _type: 'link';
        _key: string;
      }>;
      level?: number;
      _type: 'block';
      _key: string;
    }> | null;
    PTextBanner: string | null;
    imageContent: {
      asset?: {
        _ref: string;
        _type: 'reference';
        _weak?: boolean;
        [internalGroqTypeReferenceTo]?: 'sanity.imageAsset';
      };
      hotspot?: SanityImageHotspot;
      crop?: SanityImageCrop;
      _type: 'image';
    } | null;
    imagePosition: 'bottom' | 'left' | 'right' | 'top' | null;
    videoUrl: string | null;
    videoType: 'mp4' | 'webm' | null;
    layoutItems: string | null;
    PTextItem: string | null;
    orderRank: string | null;
    items: Array<{
      isActive: boolean | null;
      image: {
        asset?: {
          _ref: string;
          _type: 'reference';
          _weak?: boolean;
          [internalGroqTypeReferenceTo]?: 'sanity.imageAsset';
        };
        hotspot?: SanityImageHotspot;
        crop?: SanityImageCrop;
        _type: 'image';
      } | null;
      icon: IconManager | null;
      svgIcon: string | null;
      svgIconList: Array<
        {
          _key: string;
        } & IconsListItem
      > | null;
      alt: string | null;
      content: Array<
        | {
            children?: Array<{
              marks?: Array<string>;
              text?: string;
              _type: 'span';
              _key: string;
            }>;
            style?:
              | 'blockquote'
              | 'h1'
              | 'h2'
              | 'h3'
              | 'h4'
              | 'h5'
              | 'h6'
              | 'normal';
            listItem?: 'bullet' | 'number';
            markDefs?: Array<{
              href?: string;
              _type: 'link';
              _key: string;
            }>;
            level?: number;
            _type: 'block';
            _key: string;
          }
        | {
            asset?: {
              _ref: string;
              _type: 'reference';
              _weak?: boolean;
              [internalGroqTypeReferenceTo]?: 'sanity.imageAsset';
            };
            hotspot?: SanityImageHotspot;
            crop?: SanityImageCrop;
            _type: 'image';
            _key: string;
          }
      > | null;
    }> | null;
  }> | null;
  resumen: string | null;
  date: string | null;
  content: Array<
    | {
        children?: Array<{
          marks?: Array<string>;
          text?: string;
          _type: 'span';
          _key: string;
        }>;
        style?: 'blockquote' | 'h2' | 'h3' | 'normal';
        listItem?: 'bullet';
        markDefs?: Array<{
          href?: string;
          _type: 'link';
          _key: string;
        }>;
        level?: number;
        _type: 'block';
        _key: string;
      }
    | {
        asset?: {
          _ref: string;
          _type: 'reference';
          _weak?: boolean;
          [internalGroqTypeReferenceTo]?: 'sanity.imageAsset';
        };
        hotspot?: SanityImageHotspot;
        crop?: SanityImageCrop;
        _type: 'image';
        _key: string;
      }
  > | null;
  tableOfContents: Array<{
    _key: string;
    style: 'blockquote' | 'h2' | 'h3' | 'normal' | null;
    text: string | null;
  }> | null;
} | null;

// Source: ./sanity/lib/queries/service.query.ts
// Variable: getServicesNavQuery
// Query: *[_type == 'service' && isActive] | order(unitBusiness->orderRank asc, orderRank asc) {      "id": coalesce(slug.current, null),      "title": coalesce(title, null),      "slug": coalesce(slug.current, null),      "unitBusiness": {    "title": coalesce(unitBusiness->title, "Sin título"),    "icon": coalesce(unitBusiness->icon, "/default-icon.png"),    "slug": coalesce(unitBusiness->slug.current, "default-slug"),    "color": coalesce(unitBusiness->color, "bg-gray-100")  }    }
export type GetServicesNavQueryResult = Array<{
  id: string | null;
  title: string | null;
  slug: string | null;
  unitBusiness: {
    title: string | 'Sin t\xEDtulo';
    icon: '/default-icon.png' | 'menu' | 'user';
    slug: string | 'default-slug';
    color:
      | 'bg-blue-100 text-blue-800'
      | 'bg-gray-100 text-gray-800'
      | 'bg-gray-100'
      | 'bg-green-100 text-green-800'
      | 'bg-orange-100 text-orange-800'
      | 'bg-purple-100 text-purple-800'
      | 'bg-red-100 text-red-800'
      | 'bg-yellow-100 text-yellow-800';
  };
}>;
// Variable: getServiceDetailQuery
// Query: *[_type == 'service' && slug.current == $slug][0] {    title,  // Fetch the title of the service    "unitBusiness": {    "title": coalesce(unitBusiness->title, "Sin título"),    "icon": coalesce(unitBusiness->icon, "/default-icon.png"),    "slug": coalesce(unitBusiness->slug.current, "default-slug"),    "color": coalesce(unitBusiness->color, "bg-gray-100")  },    content,  // Fetch the content of the service    components[isActive] {   isActive,  typeComponent,  "typeComponentValue": typeComponent->value,  variant,  imageBackground,  'backgroundValue': background-> {   name,  backgroundMode,  imageBackgroundType,  colorWithDarkMode,  colorList,  "colors": colorList[]-> {    "lightColor": lightColor{      "rgb": rgb,      "alpha": alpha,      "hex": hex    },    "darkColor": darkColor{      "rgb": rgb,      "alpha": alpha,      "hex": hex    },    colorBackground1Position  },  directionDeg,  "layer" : backgroundLayer -> value,  responsiveHeight,  invertLayoutMobile,  invertLayoutDesk},  content,  PTextBanner,  imageContent,  imagePosition,  videoUrl,  videoType,  layoutItems,  PTextItem,  orderRank,  items[isActive == true]  | order(orderRank) {    isActive,    image,    icon,    svgIcon,    svgIconList,    alt,    content  } }  }
export type GetServiceDetailQueryResult = {
  title: string | null;
  unitBusiness: {
    title: string | 'Sin t\xEDtulo';
    icon: '/default-icon.png' | 'menu' | 'user';
    slug: string | 'default-slug';
    color:
      | 'bg-blue-100 text-blue-800'
      | 'bg-gray-100 text-gray-800'
      | 'bg-gray-100'
      | 'bg-green-100 text-green-800'
      | 'bg-orange-100 text-orange-800'
      | 'bg-purple-100 text-purple-800'
      | 'bg-red-100 text-red-800'
      | 'bg-yellow-100 text-yellow-800';
  };
  content: Array<
    | {
        children?: Array<{
          marks?: Array<string>;
          text?: string;
          _type: 'span';
          _key: string;
        }>;
        style?:
          | 'blockquote'
          | 'h1'
          | 'h2'
          | 'h3'
          | 'h4'
          | 'h5'
          | 'h6'
          | 'normal';
        listItem?: 'bullet' | 'number';
        markDefs?: Array<{
          href?: string;
          _type: 'link';
          _key: string;
        }>;
        level?: number;
        _type: 'block';
        _key: string;
      }
    | {
        asset?: {
          _ref: string;
          _type: 'reference';
          _weak?: boolean;
          [internalGroqTypeReferenceTo]?: 'sanity.imageAsset';
        };
        hotspot?: SanityImageHotspot;
        crop?: SanityImageCrop;
        _type: 'image';
        _key: string;
      }
  > | null;
  components: Array<{
    isActive: boolean | null;
    typeComponent: {
      _ref: string;
      _type: 'reference';
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: 'component';
    } | null;
    typeComponentValue: string | null;
    variant: 'hero' | null;
    imageBackground: {
      asset?: {
        _ref: string;
        _type: 'reference';
        _weak?: boolean;
        [internalGroqTypeReferenceTo]?: 'sanity.imageAsset';
      };
      hotspot?: SanityImageHotspot;
      crop?: SanityImageCrop;
      _type: 'image';
    } | null;
    backgroundValue: {
      name: string | null;
      backgroundMode:
        | 'colors'
        | 'image'
        | 'items'
        | 'transparent'
        | 'video'
        | null;
      imageBackgroundType: 'dynamic' | 'fixed' | null;
      colorWithDarkMode: boolean | null;
      colorList: Array<{
        _ref: string;
        _type: 'reference';
        _weak?: boolean;
        _key: string;
        [internalGroqTypeReferenceTo]?: 'colorItem';
      }> | null;
      colors: Array<{
        lightColor: {
          rgb: RgbaColor | null;
          alpha: number | null;
          hex: string | null;
        } | null;
        darkColor: {
          rgb: RgbaColor | null;
          alpha: number | null;
          hex: string | null;
        } | null;
        colorBackground1Position: number | null;
      }> | null;
      directionDeg: number | null;
      layer: string | null;
      responsiveHeight: 'fit-max' | 'h-900' | null;
      invertLayoutMobile: boolean | null;
      invertLayoutDesk: boolean | null;
    } | null;
    content: Array<{
      children?: Array<{
        marks?: Array<string>;
        text?: string;
        _type: 'span';
        _key: string;
      }>;
      style?: 'blockquote' | 'h1' | 'h2' | 'h3' | 'h4' | 'h5' | 'h6' | 'normal';
      listItem?: 'bullet' | 'number';
      markDefs?: Array<{
        href?: string;
        _type: 'link';
        _key: string;
      }>;
      level?: number;
      _type: 'block';
      _key: string;
    }> | null;
    PTextBanner: string | null;
    imageContent: {
      asset?: {
        _ref: string;
        _type: 'reference';
        _weak?: boolean;
        [internalGroqTypeReferenceTo]?: 'sanity.imageAsset';
      };
      hotspot?: SanityImageHotspot;
      crop?: SanityImageCrop;
      _type: 'image';
    } | null;
    imagePosition: 'bottom' | 'left' | 'right' | 'top' | null;
    videoUrl: string | null;
    videoType: 'mp4' | 'webm' | null;
    layoutItems: string | null;
    PTextItem: string | null;
    orderRank: string | null;
    items: Array<{
      isActive: boolean | null;
      image: {
        asset?: {
          _ref: string;
          _type: 'reference';
          _weak?: boolean;
          [internalGroqTypeReferenceTo]?: 'sanity.imageAsset';
        };
        hotspot?: SanityImageHotspot;
        crop?: SanityImageCrop;
        _type: 'image';
      } | null;
      icon: IconManager | null;
      svgIcon: string | null;
      svgIconList: Array<
        {
          _key: string;
        } & IconsListItem
      > | null;
      alt: string | null;
      content: Array<
        | {
            children?: Array<{
              marks?: Array<string>;
              text?: string;
              _type: 'span';
              _key: string;
            }>;
            style?:
              | 'blockquote'
              | 'h1'
              | 'h2'
              | 'h3'
              | 'h4'
              | 'h5'
              | 'h6'
              | 'normal';
            listItem?: 'bullet' | 'number';
            markDefs?: Array<{
              href?: string;
              _type: 'link';
              _key: string;
            }>;
            level?: number;
            _type: 'block';
            _key: string;
          }
        | {
            asset?: {
              _ref: string;
              _type: 'reference';
              _weak?: boolean;
              [internalGroqTypeReferenceTo]?: 'sanity.imageAsset';
            };
            hotspot?: SanityImageHotspot;
            crop?: SanityImageCrop;
            _type: 'image';
            _key: string;
          }
      > | null;
    }> | null;
  }> | null;
} | null;

// Source: ./sanity/lib/queries/unitBusiness.query.ts
// Variable: getUnitBusinessListQuery
// Query: *[_type == 'unitBusiness'] |  order(orderRank asc) {      title,      icon,      color,      "slug": slug.current,      orderRank  }
export type GetUnitBusinessListQueryResult = Array<{
  title: string | null;
  icon: 'menu' | 'user' | null;
  color:
    | 'bg-blue-100 text-blue-800'
    | 'bg-gray-100 text-gray-800'
    | 'bg-green-100 text-green-800'
    | 'bg-orange-100 text-orange-800'
    | 'bg-purple-100 text-purple-800'
    | 'bg-red-100 text-red-800'
    | 'bg-yellow-100 text-yellow-800'
    | null;
  slug: string | null;
  orderRank: string | null;
}>;

// Query TypeMap
import '@sanity/client';
declare module '@sanity/client' {
  interface SanityQueries {
    '*[_type == "settings"][0]': SettingsQueryResult;
    '\n  *[_type == "post" && defined(slug.current)] | order(date desc, _updatedAt desc) [0] {\n    content,\n    \n  _id,\n  "status": select(_originalId in path("drafts.**") => "draft", "published"),\n  "title": coalesce(title, "Untitled"),\n  "slug": slug.current,\n  excerpt,\n  coverImage,\n  "date": coalesce(date, _updatedAt),\n  "author": author->{"name": coalesce(name, "Anonymous"), picture},\n\n  }\n': HeroQueryResult;
    '\n  *[_type == "post" && _id != $skip && defined(slug.current)] | order(date desc, _updatedAt desc) [0...$limit] {\n    \n  _id,\n  "status": select(_originalId in path("drafts.**") => "draft", "published"),\n  "title": coalesce(title, "Untitled"),\n  "slug": slug.current,\n  excerpt,\n  coverImage,\n  "date": coalesce(date, _updatedAt),\n  "author": author->{"name": coalesce(name, "Anonymous"), picture},\n\n  }\n': MoreStoriesQueryResult;
    '\n  *[_type == "post" && slug.current == $slug] [0] {\n    content,\n    \n  _id,\n  "status": select(_originalId in path("drafts.**") => "draft", "published"),\n  "title": coalesce(title, "Untitled"),\n  "slug": slug.current,\n  excerpt,\n  coverImage,\n  "date": coalesce(date, _updatedAt),\n  "author": author->{"name": coalesce(name, "Anonymous"), picture},\n\n  }\n': PostQueryResult;
    "*[_type == 'component']{\n  value, name\n}": GetComponentListQueryResult;
    "*[_type == 'icon']{\n  value, name\n}": GetIconListQueryResult;
    "*[_type == 'reactIcon']{\n  iconGroup, iconName\n}": GetReactIconListQueryResult;
    '\n    *[_type == \'page\' && isActive] | order(orderRank asc) {\n      "id": coalesce(_id, ""), \n      "name": coalesce(name, title),\n      title,\n      "slug": select(\n        isHome == true => "",\n        slug.current\n      ),\n      isHome,\n      orderRank,\n      isActive\n    }\n  ': GetPagesNavQueryResult;
    '\n    *[_type == \'page\' && slug.current == $slug][0] {\n    \n    "id": _id,\n    name,\n    "slug": slug.current,\n    isActive,\n    title,\n    content,\n    components[isActive] | order(orderRank) { \n  isActive,\n  typeComponent,\n  "typeComponentValue": typeComponent->value,\n  variant,\n  imageBackground,\n  \'backgroundValue\': background-> { \n  name,\n  backgroundMode,\n  imageBackgroundType,\n  colorWithDarkMode,\n  colorList,\n  "colors": colorList[]-> {\n    "lightColor": lightColor{\n      "rgb": rgb,\n      "alpha": alpha,\n      "hex": hex\n    },\n    "darkColor": darkColor{\n      "rgb": rgb,\n      "alpha": alpha,\n      "hex": hex\n    },\n    colorBackground1Position\n  },\n  directionDeg,\n  "layer" : backgroundLayer -> value,\n  responsiveHeight,\n  invertLayoutMobile,\n  invertLayoutDesk\n},\n  content,\n  PTextBanner,\n  imageContent,\n  imagePosition,\n  videoUrl,\n  videoType,\n  layoutItems,\n  PTextItem,\n  orderRank,\n  items[isActive == true]  | order(orderRank) {\n    isActive,\n    image,\n    icon,\n    svgIcon,\n    svgIconList,\n    alt,\n    content\n  }\n }\n\n    }': GetPageDetailQueryResult;
    '\n    *[_type == \'post\'] | order(orderRank desc) {\n      \n  title,\n  slug,\n  \n"unitBusiness": {\n    "title": coalesce(unitBusiness->title, "Sin t\xEDtulo"),\n    "icon": coalesce(unitBusiness->icon, "/default-icon.png"),\n    "slug": coalesce(unitBusiness->slug.current, "default-slug"),\n    "color": coalesce(unitBusiness->color, "bg-gray-100")\n  }\n,\n  orderRank,\n  components[isActive] | order(orderRank) { \n  isActive,\n  typeComponent,\n  "typeComponentValue": typeComponent->value,\n  variant,\n  imageBackground,\n  \'backgroundValue\': background-> { \n  name,\n  backgroundMode,\n  imageBackgroundType,\n  colorWithDarkMode,\n  colorList,\n  "colors": colorList[]-> {\n    "lightColor": lightColor{\n      "rgb": rgb,\n      "alpha": alpha,\n      "hex": hex\n    },\n    "darkColor": darkColor{\n      "rgb": rgb,\n      "alpha": alpha,\n      "hex": hex\n    },\n    colorBackground1Position\n  },\n  directionDeg,\n  "layer" : backgroundLayer -> value,\n  responsiveHeight,\n  invertLayoutMobile,\n  invertLayoutDesk\n},\n  content,\n  PTextBanner,\n  imageContent,\n  imagePosition,\n  videoUrl,\n  videoType,\n  layoutItems,\n  PTextItem,\n  orderRank,\n  items[isActive == true]  | order(orderRank) {\n    isActive,\n    image,\n    icon,\n    svgIcon,\n    svgIconList,\n    alt,\n    content\n  }\n },\n  "resumen": coalesce(\n    resumen,\n    array::join(content[_type == "block" && style == "normal"][0].children[].text, " ")\n  ),\n  date\n  \n      }': GetPostListQueryResult;
    '\n    *[_type == \'post\' && unitBusiness->slug.current == $slug] {\n      \n  title,\n  slug,\n  \n"unitBusiness": {\n    "title": coalesce(unitBusiness->title, "Sin t\xEDtulo"),\n    "icon": coalesce(unitBusiness->icon, "/default-icon.png"),\n    "slug": coalesce(unitBusiness->slug.current, "default-slug"),\n    "color": coalesce(unitBusiness->color, "bg-gray-100")\n  }\n,\n  orderRank,\n  components[isActive] | order(orderRank) { \n  isActive,\n  typeComponent,\n  "typeComponentValue": typeComponent->value,\n  variant,\n  imageBackground,\n  \'backgroundValue\': background-> { \n  name,\n  backgroundMode,\n  imageBackgroundType,\n  colorWithDarkMode,\n  colorList,\n  "colors": colorList[]-> {\n    "lightColor": lightColor{\n      "rgb": rgb,\n      "alpha": alpha,\n      "hex": hex\n    },\n    "darkColor": darkColor{\n      "rgb": rgb,\n      "alpha": alpha,\n      "hex": hex\n    },\n    colorBackground1Position\n  },\n  directionDeg,\n  "layer" : backgroundLayer -> value,\n  responsiveHeight,\n  invertLayoutMobile,\n  invertLayoutDesk\n},\n  content,\n  PTextBanner,\n  imageContent,\n  imagePosition,\n  videoUrl,\n  videoType,\n  layoutItems,\n  PTextItem,\n  orderRank,\n  items[isActive == true]  | order(orderRank) {\n    isActive,\n    image,\n    icon,\n    svgIcon,\n    svgIconList,\n    alt,\n    content\n  }\n },\n  "resumen": coalesce(\n    resumen,\n    array::join(content[_type == "block" && style == "normal"][0].children[].text, " ")\n  ),\n  date\n  \n      }': GetPostListByUnitBusinessQueryResult;
    '\n  *[_type == \'post\' && slug.current == $slug][0] {\n    \n  title,\n  slug,\n  \n"unitBusiness": {\n    "title": coalesce(unitBusiness->title, "Sin t\xEDtulo"),\n    "icon": coalesce(unitBusiness->icon, "/default-icon.png"),\n    "slug": coalesce(unitBusiness->slug.current, "default-slug"),\n    "color": coalesce(unitBusiness->color, "bg-gray-100")\n  }\n,\n  orderRank,\n  components[isActive] | order(orderRank) { \n  isActive,\n  typeComponent,\n  "typeComponentValue": typeComponent->value,\n  variant,\n  imageBackground,\n  \'backgroundValue\': background-> { \n  name,\n  backgroundMode,\n  imageBackgroundType,\n  colorWithDarkMode,\n  colorList,\n  "colors": colorList[]-> {\n    "lightColor": lightColor{\n      "rgb": rgb,\n      "alpha": alpha,\n      "hex": hex\n    },\n    "darkColor": darkColor{\n      "rgb": rgb,\n      "alpha": alpha,\n      "hex": hex\n    },\n    colorBackground1Position\n  },\n  directionDeg,\n  "layer" : backgroundLayer -> value,\n  responsiveHeight,\n  invertLayoutMobile,\n  invertLayoutDesk\n},\n  content,\n  PTextBanner,\n  imageContent,\n  imagePosition,\n  videoUrl,\n  videoType,\n  layoutItems,\n  PTextItem,\n  orderRank,\n  items[isActive == true]  | order(orderRank) {\n    isActive,\n    image,\n    icon,\n    svgIcon,\n    svgIconList,\n    alt,\n    content\n  }\n },\n  "resumen": coalesce(\n    resumen,\n    array::join(content[_type == "block" && style == "normal"][0].children[].text, " ")\n  ),\n  date\n  ,\n    content,\n    "tableOfContents" : content[style in [\'h2\', \'h3\']] {\n      _key,\n      style,\n      \'text\':children[0].text \n    }\n  }\n': GetPostDetailQueryResult;
    '*[_type == \'service\' && isActive] | order(unitBusiness->orderRank asc, orderRank asc) {\n      "id": coalesce(slug.current, null),\n      "title": coalesce(title, null),\n      "slug": coalesce(slug.current, null),\n      \n"unitBusiness": {\n    "title": coalesce(unitBusiness->title, "Sin t\xEDtulo"),\n    "icon": coalesce(unitBusiness->icon, "/default-icon.png"),\n    "slug": coalesce(unitBusiness->slug.current, "default-slug"),\n    "color": coalesce(unitBusiness->color, "bg-gray-100")\n  }\n\n    }': GetServicesNavQueryResult;
    '*[_type == \'service\' && slug.current == $slug][0] {\n    title,  // Fetch the title of the service\n    \n"unitBusiness": {\n    "title": coalesce(unitBusiness->title, "Sin t\xEDtulo"),\n    "icon": coalesce(unitBusiness->icon, "/default-icon.png"),\n    "slug": coalesce(unitBusiness->slug.current, "default-slug"),\n    "color": coalesce(unitBusiness->color, "bg-gray-100")\n  }\n,\n    content,  // Fetch the content of the service\n    components[isActive] { \n  isActive,\n  typeComponent,\n  "typeComponentValue": typeComponent->value,\n  variant,\n  imageBackground,\n  \'backgroundValue\': background-> { \n  name,\n  backgroundMode,\n  imageBackgroundType,\n  colorWithDarkMode,\n  colorList,\n  "colors": colorList[]-> {\n    "lightColor": lightColor{\n      "rgb": rgb,\n      "alpha": alpha,\n      "hex": hex\n    },\n    "darkColor": darkColor{\n      "rgb": rgb,\n      "alpha": alpha,\n      "hex": hex\n    },\n    colorBackground1Position\n  },\n  directionDeg,\n  "layer" : backgroundLayer -> value,\n  responsiveHeight,\n  invertLayoutMobile,\n  invertLayoutDesk\n},\n  content,\n  PTextBanner,\n  imageContent,\n  imagePosition,\n  videoUrl,\n  videoType,\n  layoutItems,\n  PTextItem,\n  orderRank,\n  items[isActive == true]  | order(orderRank) {\n    isActive,\n    image,\n    icon,\n    svgIcon,\n    svgIconList,\n    alt,\n    content\n  }\n }\n  }': GetServiceDetailQueryResult;
    '\n    *[_type == \'unitBusiness\'] |  order(orderRank asc) {\n      title,\n      icon,\n      color,\n      "slug": slug.current,\n      orderRank\n  }': GetUnitBusinessListQueryResult;
  }
}
